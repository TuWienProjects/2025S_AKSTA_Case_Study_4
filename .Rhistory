# Load required packages
library(readxl)        # For reading Excel files
library(dplyr)         # For data manipulation
library(ggplot2)       # For visualization
library(psych)         # For descriptive statistics
library(likert)        # For Likert-scale handling (if needed)
library(knitr)         # For tables
library(kableExtra)    # For enhanced table styling
# Load the survey data
survey_data <- read_excel("data/group7.xlsx")
# Preview structure and dimensions
str(survey_data)
dim(survey_data)
# View raw column names
names(survey_data)
# Clean and rename columns for clarity
colnames(survey_data) <- c(
"age",
"gender",
"program",
"ai_usage",
"ai_hours",
"ai_opinions"
)
# Re-check structure after renaming
str(survey_data)
# Rename correctly based on inspection
colnames(survey_data) <- c(
"gender",   # originally DemographicAnswer.1 → holds "male", "female"
"age",      # originally DemographicAnswer.2 → holds numeric-like ages
"program",
"ai_usage",
"ai_hours",
"ai_opinions"
)
# Convert age and ai_hours to numeric
survey_data$age <- as.numeric(survey_data$age)
survey_data$ai_hours <- as.numeric(survey_data$ai_hours)
# Recheck structure
str(survey_data)
# Define unique AI opinion statements (9 total from survey)
ai_items <- c(
"Using AI tools has helped me save time when completing academic tasks.",
"Using AI tools has helped me improve the quality of my academic work.",
"Using AI tools has increased my motivation to learn new things.",
"Using AI tools has helped me better understand and retain the material I study.",
"Using AI tools has made it harder for me to retain information in the long term.",
"Using AI tools has decreased my confidence in my own learning abilities.",
"Using AI tools has lowered the quality of my academic work.",
"Using AI tools has not caused any significant changes in my academic performance.",
"I do not use AI tools for academic purposes."
)
# Create one logical column for each opinion
for (item in ai_items) {
col_name <- paste0("op_", make.names(substr(item, 1, 40)))  # create safe short names
survey_data[[col_name]] <- grepl(item, survey_data$ai_opinions, fixed = TRUE)
}
# View new structure
names(survey_data)
library(ggplot2)
# Create a summarized dataset
rq1_summary <- survey_data %>%
group_by(ai_usage) %>%
summarise(
SaveTime = mean(op_Using.AI.tools.has.helped.me.save.time.w, na.rm = TRUE),
ImproveQuality = mean(op_Using.AI.tools.has.helped.me.improve.the, na.rm = TRUE),
Count = n()
)
# Convert to long format for grouped barplot
rq1_long <- rq1_summary %>%
tidyr::pivot_longer(cols = c(SaveTime, ImproveQuality), names_to = "Outcome", values_to = "Proportion")
# Plot
ggplot(rq1_long, aes(x = ai_usage, y = Proportion, fill = Outcome)) +
geom_col(position = "dodge") +
labs(
title = "Proportion of Students Reporting Time-saving and Quality Improvement",
x = "AI Tool Usage",
y = "Proportion (True Responses)",
fill = "Response Type"
) +
theme_minimal()
# Only include users who answered "Yes"
rq1_summary <- survey_data %>%
filter(ai_usage == "Yes") %>%
summarise(
SaveTime = mean(op_Using.AI.tools.has.helped.me.save.time.w, na.rm = TRUE),
ImproveQuality = mean(op_Using.AI.tools.has.helped.me.improve.the, na.rm = TRUE)
) %>%
pivot_longer(cols = everything(), names_to = "Outcome", values_to = "Proportion")
library(ggplot2)
library(tidyr)
library(dplyr)
# Only include users who answered "Yes"
rq1_summary <- survey_data %>%
filter(ai_usage == "Yes") %>%
summarise(
SaveTime = mean(op_Using.AI.tools.has.helped.me.save.time.w, na.rm = TRUE),
ImproveQuality = mean(op_Using.AI.tools.has.helped.me.improve.the, na.rm = TRUE)
) %>%
pivot_longer(cols = everything(), names_to = "Outcome", values_to = "Proportion")
# Plot
ggplot(rq1_summary, aes(x = Outcome, y = Proportion, fill = Outcome)) +
geom_col(width = 0.5) +
geom_text(aes(label = scales::percent(Proportion, accuracy = 1)),
vjust = -0.3, size = 4.5) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0, 1)) +
labs(
title = "Reported Benefits of AI Use (Time-saving & Quality)",
subtitle = "Among AI Users Only (n = 98)",
x = NULL,
y = "Proportion of Respondents",
fill = "Benefit Type"
) +
theme_minimal(base_size = 13)
library(dplyr)
library(ggplot2)
# Create usage buckets
survey_data$usage_group <- cut(
survey_data$ai_hours,
breaks = c(-Inf, 2, 5, 10, Inf),
labels = c("0–2 hrs", "3–5 hrs", "6–10 hrs", "10+ hrs")
)
# Summarize motivation rate by usage group
rq2_summary <- survey_data %>%
group_by(usage_group) %>%
summarise(
MotivationRate = mean(op_Using.AI.tools.has.increased.my.motivati, na.rm = TRUE),
n = n()
)
# Plot
ggplot(rq2_summary, aes(x = usage_group, y = MotivationRate)) +
geom_col(fill = "#00BFC4") +
geom_text(aes(label = scales::percent(MotivationRate, accuracy = 1)), vjust = -0.3, size = 4.5) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0, 1)) +
labs(
title = "Motivation by Weekly AI Usage",
subtitle = "Proportion of students who report increased motivation",
x = "Weekly AI Usage (hours)",
y = "Motivated (TRUE responses)"
) +
theme_minimal(base_size = 13)
# Summarize retention response by usage group (filtering NA)
rq3_summary <- survey_data %>%
filter(!is.na(usage_group)) %>%
group_by(usage_group) %>%
summarise(
RetentionRate = mean(op_Using.AI.tools.has.helped.me.better.unde, na.rm = TRUE),
n = n()
)
# Plot
ggplot(rq3_summary, aes(x = usage_group, y = RetentionRate)) +
geom_col(fill = "#F8766D") +
geom_text(aes(label = scales::percent(RetentionRate, accuracy = 1)), vjust = -0.3, size = 4.5) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0, 1)) +
labs(
title = "Retention by Weekly AI Usage",
subtitle = "Proportion of students who report better understanding & retention",
x = "Weekly AI Usage (hours)",
y = "Retention (TRUE responses)"
) +
theme_minimal(base_size = 13)
# Load required packages again (if needed)
library(psych)
library(knitr)
library(kableExtra)
# Summary stats for numeric variables
numeric_summary <- psych::describe(survey_data %>% select(age, ai_hours))
# Show as styled table
kable(numeric_summary, digits = 2, caption = "Summary Statistics for Age and Weekly AI Usage") %>%
kable_styling(full_width = FALSE, position = "center")
# Count number of TRUE responses
n_total <- nrow(survey_data)
# Time-saving
n_save_time <- sum(survey_data$op_Using.AI.tools.has.helped.me.save.time.w, na.rm = TRUE)
test_save <- binom.test(n_save_time, n_total, p = 0.5, alternative = "greater")
# Quality improvement
n_quality <- sum(survey_data$op_Using.AI.tools.has.helped.me.improve.the, na.rm = TRUE)
test_quality <- binom.test(n_quality, n_total, p = 0.5, alternative = "greater")
# Output results
test_save
test_quality
# Create binary variable
motivation <- survey_data$op_Using.AI.tools.has.increased.my.motivati
# Fit logistic regression model
model_rq2 <- glm(motivation ~ ai_hours, data = survey_data, family = binomial)
# Model summary
summary(model_rq2)
# Binary outcome: retention opinion
retention <- survey_data$op_Using.AI.tools.has.helped.me.better.unde
# Logistic regression
model_rq3 <- glm(retention ~ ai_hours, data = survey_data, family = binomial)
# Model summary
summary(model_rq3)
sessionInfo()
library(dplyr)
library(ggplot2)
# Create usage buckets
survey_data$usage_group <- cut(
survey_data$ai_hours,
breaks = c(-Inf, 2, 5, 10, Inf),
labels = c("0–2 hrs", "3–5 hrs", "6–10 hrs", "10+ hrs")
)
# Boxplot by increase_motivation
ggplot(survey_data, aes(x = op_Using.AI.tools.has.increased.my.motivati, y = ai_hours)) +
geom_boxplot(fill = "#00BFC4", color = "#005DC4") +
scale_x_discrete(labels = c("FALSE" = "No", "TRUE" = "Yes")) +
labs(title = "Weekly use of AI vs Motivation Increase",
subtitle = "Comparison of AI tool usage by perceived motivation impact",
x = "Reported Increase in Motivation",
y = "Weekly AI Usage (hours)") +
theme_minimal(base_size = 13)
shiny::runApp('E:/Learning/DS2024 Tu Wien AU/2025S/AKSTA 105.731-2025S_20250325_1624/2025S_AKSTA_Case_Study_4')
runApp('E:/Learning/DS2024 Tu Wien AU/2025S/AKSTA 105.731-2025S_20250325_1624/2025S_AKSTA_Case_Study_4')
runApp('E:/Learning/DS2024 Tu Wien AU/2025S/AKSTA 105.731-2025S_20250325_1624/2025S_AKSTA_Case_Study_4')
runApp('E:/Learning/DS2024 Tu Wien AU/2025S/AKSTA 105.731-2025S_20250325_1624/2025S_AKSTA_Case_Study_4')
runApp('E:/Learning/DS2024 Tu Wien AU/2025S/AKSTA 105.731-2025S_20250325_1624/2025S_AKSTA_Case_Study_4')
runApp('E:/Learning/DS2024 Tu Wien AU/2025S/AKSTA 105.731-2025S_20250325_1624/2025S_AKSTA_Case_Study_4')
runApp('E:/Learning/DS2024 Tu Wien AU/2025S/AKSTA 105.731-2025S_20250325_1624/2025S_AKSTA_Case_Study_4')
runApp('E:/Learning/DS2024 Tu Wien AU/2025S/AKSTA 105.731-2025S_20250325_1624/2025S_AKSTA_Case_Study_4')
runApp('E:/Learning/DS2024 Tu Wien AU/2025S/AKSTA 105.731-2025S_20250325_1624/2025S_AKSTA_Case_Study_4')
runApp('E:/Learning/DS2024 Tu Wien AU/2025S/AKSTA 105.731-2025S_20250325_1624/2025S_AKSTA_Case_Study_4')
ls
setwd("E:/Learning/DS2024 Tu Wien AU/2025S/AKSTA 105.731-2025S_20250325_1624/2025S_AKSTA_Case_Study_4")
rsconnect::writeManifest()
install.packages("maps")
install.packages("maps")
rsconnect::writeManifest()
